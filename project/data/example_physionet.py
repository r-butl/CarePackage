import pandas as pd
import numpy as np
import wfdb
import ast

def load_raw_data(df, sampling_rate, path):
    if sampling_rate == 100:
        data = [wfdb.rdsamp(path+f) for f in df.filename_lr]
    else:
        data = [wfdb.rdsamp(path+f) for f in df.filename_hr]
    data = np.array([signal for signal, meta in data])
    return data

#   ptb-xl-a-large-publicly-available-electrocardiography-dataset-1.0.3

path = '/home/lucas/Desktop/Senior_project/data/'
# sampling_rate=100
# 
# load and convert annotation data
Y = pd.read_csv(path+'ptbxl_database.csv', index_col='ecg_id')
'''
patient_id
age
sex
height
weight
nurse
site
device
recording_date
report
scp_codes
heart_axis
infarction_stadium1
infarction_stadium2
validated_by
second_opinion
initial_autogenerated_report
validated_by_human
baseline_drift
static_noise
burst_noise
electrodes_problems
extra_beats
pacemaker
strat_fold
filename_lr
filename_hr
'''

print(Y['strat_fold'])
Y.scp_codes = Y.scp_codes.apply(lambda x: ast.literal_eval(x))

# # Load raw signal data
# X = load_raw_data(Y, sampling_rate, path)

# # Signal, Timestep, value for each of the 12 leads
# sig = [X[0][i][0] for i in range(len(X[0]))]
# print(len(sig))


# import matplotlib.pyplot as plt
# plt.xlabel("Time (milliseconds)")
# plt.ylabel("Voltage (millivolts)")
# plt.show()


# Classifications
# 7185	NORM	Normal ECG
# 3232	CD	    Myocardial Infarction
# 3064	STTC	ST/T Change
# 2936	MI	    Conduction Disturbance
# 815	 HYP	    Hypertrophy


# Load scp_statements.csv for diagnostic aggregation
agg_df = pd.read_csv(path+'scp_statements.csv', index_col=0)
print(agg_df.head())
for i in agg_df['description']:
    print(i)

agg_df = agg_df[agg_df.diagnostic == 1]
def aggregate_diagnostic(y_dic):
    tmp = []
    for key in y_dic.keys():
        if key in agg_df.index:
            tmp.append(agg_df.loc[key].diagnostic_class)
    return list(set(tmp))
# Apply diagnostic superclass
Y['diagnostic_superclass'] = Y.scp_codes.apply(aggregate_diagnostic)

for i in Y['diagnostic_superclass']:
    if len(i) == 1: print(i)

# # Split data into train and test
# test_fold = 10
# # Train
# X_train = X[np.where(Y.strat_fold != test_fold)]
# y_train = Y[(Y.strat_fold != test_fold)].diagnostic_superclass
# # Test
# X_test = X[np.where(Y.strat_fold == test_fold)]
# y_test = Y[Y.strat_fold == test_fold].diagnostic_superclass
